# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from grpc_core.protos.echo import echo_pb2 as echo__pb2


class EchoServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ClientStream = channel.stream_unary(
                '/echo.EchoService/ClientStream',
                request_serializer=echo__pb2.EchoMessage.SerializeToString,
                response_deserializer=echo__pb2.DelayedReply.FromString,
                )
        self.ServerStream = channel.unary_stream(
                '/echo.EchoService/ServerStream',
                request_serializer=echo__pb2.EchoMessage.SerializeToString,
                response_deserializer=echo__pb2.EchoMessage.FromString,
                )
        self.BothStream = channel.stream_stream(
                '/echo.EchoService/BothStream',
                request_serializer=echo__pb2.EchoMessage.SerializeToString,
                response_deserializer=echo__pb2.EchoMessage.FromString,
                )


class EchoServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ClientStream(self, request_iterator, context):
        """Client Streaming
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ServerStream(self, request, context):
        """Server Streaming
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BothStream(self, request_iterator, context):
        """Both Streaming
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EchoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ClientStream': grpc.stream_unary_rpc_method_handler(
                    servicer.ClientStream,
                    request_deserializer=echo__pb2.EchoMessage.FromString,
                    response_serializer=echo__pb2.DelayedReply.SerializeToString,
            ),
            'ServerStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ServerStream,
                    request_deserializer=echo__pb2.EchoMessage.FromString,
                    response_serializer=echo__pb2.EchoMessage.SerializeToString,
            ),
            'BothStream': grpc.stream_stream_rpc_method_handler(
                    servicer.BothStream,
                    request_deserializer=echo__pb2.EchoMessage.FromString,
                    response_serializer=echo__pb2.EchoMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'echo.EchoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EchoService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ClientStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/echo.EchoService/ClientStream',
            echo__pb2.EchoMessage.SerializeToString,
            echo__pb2.DelayedReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ServerStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/echo.EchoService/ServerStream',
            echo__pb2.EchoMessage.SerializeToString,
            echo__pb2.EchoMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BothStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/echo.EchoService/BothStream',
            echo__pb2.EchoMessage.SerializeToString,
            echo__pb2.EchoMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
